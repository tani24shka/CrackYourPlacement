class Solution {
public:
    int dx[8] = {-1, -1, -1, 0 , 0 , 1 ,1 , 1};
    int dy[8] = {-1, 0, 1, -1 , 1, -1 ,0 , 1};
    int calculateNeigh(vector<vector<int>>& board, int i, int j){
        int cnt = 0;
        int n = board.size(), m = board[0].size();
        for(int dir = 0; dir < 8; dir++){
            int newx = i + dx[dir];
            int newy = j + dy[dir];

            if(newx >= 0 && newy >= 0 && newx < n && newy < m){
                if(board[newx][newy] == 1)cnt++;
            }
        }
        return cnt;
    }
    void gameOfLife(vector<vector<int>>& board) {
        int n = board.size(), m = board[0].size();

        vector<vector<int>>newBoard(n, vector<int>(m, -1));
        for(int i = 0; i <n; i++){
            for(int j = 0; j < m; j++){
                int cnt = calculateNeigh(board, i, j);
                if(board[i][j] == 0 && cnt == 3){
                    newBoard[i][j] = 1;
                }
                else if(board[i][j] == 1 && (cnt == 2 || cnt == 3)){
                    newBoard[i][j] = 1;
                }
                else{
                    newBoard[i][j] = 0;
                }
            }
        }
        for(int i = 0; i <n; i++){
            for(int j = 0; j < m; j++){
                board[i][j] = newBoard[i][j];
            }
        }
        return;
    }
};
