//class Solution {
// public:
//     int recur(vector<int>& cardPoints, int k,int n,int low,int high,int take){
//         if(k==0)return 0;
//         take =max(cardPoints[low]+recur(cardPoints,k-1,n,low+1,high,take),cardPoints[high]+recur(cardPoints,k-1,n,low,high-1,take));
//         return take;
//     }
//     int maxScore(vector<int>& cardPoints, int k) {
//         int n=cardPoints.size();
//         return recur(cardPoints,k,n,0,n-1,0);
//     }
// };
//TLE
class Solution {
public:
    int maxScore(vector<int>& cardPoints, int k) {
       int n=cardPoints.size();
       int sum=0;
       for(int i=0;i<k;i++)sum+=cardPoints[i];
        int curr=sum;
        for(int j=k-1;j>=0;j--){
            curr=curr-cardPoints[j];
            curr+=cardPoints[n-k+j];
            sum=max(sum,curr);

        }
        return sum;
    }
        
};
